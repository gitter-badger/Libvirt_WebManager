@model Libvirt_WebManager.ViewModels.NoVNC.ConnectionInfo

<link href="~/Scripts/novnc/base.css" rel="stylesheet" />
<script src="~/Scripts/novnc/util.js"></script>
<div class="row">
    <div class="col-sm-12">
        <div id="noVNC_screen">
            <div id="noVNC_status_bar" class="noVNC_status_bar" style="margin-top: 0px;">
                <table border=0 width="100%">
                    <tr>
                        <td>
                            <div id="noVNC_status" style="position: relative; height: auto;">
                                Loading
                            </div>
                        </td>
                        <td width="1%">
                            <div id="noVNC_buttons">
                                <input type=button value="Send CtrlAltDel"
                                       id="sendCtrlAltDelButton">
                                <span id="noVNC_xvp_buttons">
                                    @Html.Partial("_Partial_DomainControlOptions", Model)
                                </span>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
            <canvas id="noVNC_canvas" width="640px" height="20px">
                Canvas not supported.
            </canvas>

        </div>
        <script>
      
            "use strict";
            var INCLUDE_URI = "/Scripts/novnc/";
            // Load supporting scripts
            Util.load_scripts(["webutil.js", "base64.js", "websock.js", "des.js",
                               "keysymdef.js", "keyboard.js", "input.js", "display.js",
                               "jsunzip.js", "rfb.js", "keysym.js"]);

            var rfb;
      
            function setPassword() {
                rfb.sendPassword($('#password_input').val());
                return false;
            }
            function passwordRequired(r) {
                $('#noVNC_status').html("Password Required: <input type='password' size='10' id='password_input' class='noVNC_status' /><button onclick='return setPassword();'>Authenticate<button>");
            }

            function sendCtrlAltDel() {
                rfb.sendCtrlAltDel();
                return false;
            }

            function updateState(rfb, state, oldstate, msg) {
                var s, sb, cad, level;
                s = $D('noVNC_status');
                sb = $D('noVNC_status_bar');
                cad = $D('sendCtrlAltDelButton');
                switch (state) {
                    case 'failed': level = "error"; break;
                    case 'fatal': level = "error"; break;
                    case 'normal': level = "normal"; break;
                    case 'disconnected': level = "normal"; break;
                    case 'loaded': level = "normal"; break;
                    default: level = "warn"; break;
                }

                if (cad != null) {
                    console.log('state ' + state);
                    if (state === "normal") {
                        cad.disabled = false;
                    } else {
                        cad.disabled = true;
                        xvpInit(0);
                    }
                }


                if (typeof (msg) !== 'undefined') {
                    s.innerHTML = msg;
                }
            }

            function xvpInit(ver) {
                var xvpbuttons = $D('noVNC_xvp_buttons');
                xvpbuttons.style.display = 'inline';
            }

            window.onscriptsload = function () {
                var host, port, password, path, token;

                $D('sendCtrlAltDelButton').style.display = "inline";
                $D('sendCtrlAltDelButton').onclick = sendCtrlAltDel;

                WebUtil.init_logging(WebUtil.getQueryVar('logging', 'warn'));
                document.title = unescape(WebUtil.getQueryVar('title', 'noVNC'));

                // If a token variable is passed in, set the parameter in a cookie.
                // This is used by nova-novncproxy.
                token = WebUtil.getQueryVar('token', null);
                if (token) {
                    WebUtil.createCookie('token', token, 1)
                }

                rfb = new RFB({
                    'target': $D('noVNC_canvas'),
                    'encrypt': WebUtil.getQueryVar('encrypt',
                             (window.location.protocol === "https:")),
                    'repeaterID': WebUtil.getQueryVar('repeaterID', ''),
                    'true_color': WebUtil.getQueryVar('true_color', true),
                    'local_cursor': WebUtil.getQueryVar('cursor', true),
                    'shared': WebUtil.getQueryVar('shared', true),
                    'view_only': WebUtil.getQueryVar('view_only', false),
                    'onUpdateState': updateState,
                    'onXvpInit': xvpInit,
                    'onPasswordRequired': passwordRequired
                });
                @if (Model.State == Libvirt.virDomainState.VIR_DOMAIN_RUNNING)
                {
                    <text>rfb.connect('@Model.Host', '@Model.Port', '@Model.Password', '@Model.Path');</text>
                }
            };

        </script>
    </div>
</div>
